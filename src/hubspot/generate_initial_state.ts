import * as fs from "fs";
import * as path from "path";
import { HubSpotClient } from "../provider/hubspot_client";

const hsClient = new HubSpotClient();

function createDirectory(path: string) {
    try {
        fs.mkdirSync(path);
        return;
    } catch (e) {
        if (e.code === "EEXIST") {
            return;
        }
        throw new Error(e);
    }
}

function sortPropertiesByGroup(props: any) {
    const result: any = {};
    const propKeys = Object.keys(props);

    for (let i = 0; i < propKeys.length; i++) {
        const key = propKeys[i];
        const prop = props[key];
        const groupName = prop.groupName;

        if (result[groupName] === undefined) {
            result[groupName] = [prop];
            continue;
        }

        result[groupName].push(prop);
    }

    return result;
}

export async function getCurrentContactPropertiesByGroup(): Promise<any> {
    const [ err, contactProperties ] = await hsClient.get("/properties/v1/contacts/properties");
    if (err) {
        throw new Error("Error fetching current contact properties: " + err?.response?.data?.message);
    }

    return sortPropertiesByGroup(contactProperties);
}

export async function getCurrentContactPropertyGroups(): Promise<any[]> {
    const [ err, contactPropertyGroups ] = await hsClient.get("/properties/v1/contacts/groups");
    if (err) {
        throw new Error("Error fetching current contact property groups: " + err?.response?.data?.message);
    }

    return contactPropertyGroups as any[];
}

export function buildContactPropertyGroupDirectories(groupNames: string[]) {
    // Create the parent contact properties directory.
    const contactPropertyDirectoryPath = path.join(__dirname, "/contact_properties");
    createDirectory(contactPropertyDirectoryPath);

    // Loop over the group names and create directory for each group that will
    // contain its respective properties.
    for (let i = 0; i < groupNames.length; i++) {
        const groupName = groupNames[i];
        const dirPath = path.join(__dirname, "/contact_properties", `/${groupName}`);
        createDirectory(dirPath);
    }

    return;
}

function buildArgs(props: any, keys: string[]): string {
    let result = "";
    const propsKeys = Object.keys(props);

    for (let i = 0; i < propsKeys.length; i++) {
        const propKey = propsKeys[i];
        if (keys.indexOf(propKey) > -1) {
            const value = JSON.stringify(props[propKey])
            result += `        ${propKey}: ${value},\n`;
        }
    }

    return result;
}

function generateContactPropertyFunction(prop: any) {
    const buildArgsKeys = [
        "label", "groupName", "type", "fieldType", "description", "formField", "displayOrder",
        "mutableDefinitionNotDeletable", "readOnly", "readOnlyDefinition", "hidden", "options", "calculated"
    ];
    return "\n" +
           `    properties["${prop.name}"] = new ContactProperty("${prop.name}", {\n` +
           `        // This field is used to indentify that this property was generated during importing existing properties.\n` +
           `        // Autogenerated fields are not editable. So if you try and change a value in this object you will fail.\n` +
           `        // If you want to edit this field, remove this field. Do so at your own peril.\n` +
           `        autoGeneratedViaImport: true,\n` +
           buildArgs(prop, buildArgsKeys) +
           `    });\n`;
}

export function generateContactPropertyTS(groupName: string, props: any[]) {
    let file = `// Contact Properties in ${groupName}.\n` +
               "import * as pulumi from \"@pulumi/pulumi\";\n" +
               "import { ContactProperty } from \"../../../provider/contact_properties\";\n\n" +
               "export const contactProperties = () => {\n" +
               "    const properties: any = {};\n";

    for (let i = 0; i < props.length; i++) {
        file += generateContactPropertyFunction(props[i]);
    }

    file += "\n" +
            "    return properties;\n" +
            "};\n";

    fs.writeFileSync(`./src/hubspot/contact_properties/${groupName}/index.ts`, file);
}

export function generateContactPropertyIndexFile(groupNames: string[]) {
    let file = "// Contact Properties.\n" +
               "import * as pulumi from \"@pulumi/pulumi\";\n";

    // Loop over the group names and create the import statements.
    for (let i = 0; i < groupNames.length; i++) {
        const groupName = groupNames[i];
        file += `import * as ${groupName} from "./${groupName}/index";\n`;
    }

    // Create the exported const.
    const groupMethods = groupNames.map(name => `${name}.contactProperties()`).join(",");
    file += `\n` +
            `export const contactProperties = Object.assign({},\n` +
            `${groupMethods}\n` +
            `);\n`;

    fs.writeFileSync(`./src/hubspot/contact_properties/index.ts`, file);
}
